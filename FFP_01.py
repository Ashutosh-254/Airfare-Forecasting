# -*- coding: utf-8 -*-
"""FFP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19APKy_xjtBlVaJyBMTNrMXqfOdTgKVEr

Loading all required libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set()

"""Training and displaying given data set"""

train_data = pd.read_excel(r"/content/Data_Train.xlsx")
pd.set_option('display.max_columns', None)
train_data.head()

train_data.info()

"""Filtering and/or sorting the data according to certain parameters i.e. sorting

"""

train_data["Duration"].value_counts()

train_data.dropna(inplace = True)

train_data.isnull().sum()

"""We must use the "to_datetime" function of the pandas library to change the "Date_of_Journey" column from text to a timestamp format in order to use it successfully for prediction. With the use of this conversion, we are able to separate out certain data for analysis or forecasting, such as the date's day or month."""

train_data["Journey_day"] = pd.to_datetime(train_data.Date_of_Journey, format="%d/%m/%Y").dt.day

train_data["Journey_month"] = pd.to_datetime(train_data["Date_of_Journey"], format = "%d/%m/%Y").dt.month

train_data.head()

"""Since we have converted Date_of_Journey column into integers, Now we can drop as it is of no use."""

train_data.drop(["Date_of_Journey"], axis = 1, inplace = True)

"""Departure time is when a plane leaves the gate.
Similar to Date_of_Journey we can extract values from Dep_Time
"""

# Extracting Hours
train_data["Dep_hour"] = pd.to_datetime(train_data["Dep_Time"]).dt.hour

# Extracting Minutes
train_data["Dep_min"] = pd.to_datetime(train_data["Dep_Time"]).dt.minute

# Now we can drop Dep_Time as it is of no use
train_data.drop(["Dep_Time"], axis = 1, inplace = True)

train_data.head()

"""Arrival time is when the plane pulls up to the gate.
Similar to Date_of_Journey we can extract values from Arrival_Time
"""

# Extracting Hours
train_data["Arrival_hour"] = pd.to_datetime(train_data.Arrival_Time).dt.hour

# Extracting Minutes
train_data["Arrival_min"] = pd.to_datetime(train_data.Arrival_Time).dt.minute

# Now we can drop Arrival_Time as it is of no use
train_data.drop(["Arrival_Time"], axis = 1, inplace = True)

train_data.head()

"""Time taken by plane to reach destination is called Duration
It is the differnce betwwen Departure Time and Arrival time
"""

# Assigning and converting Duration column into list
duration = list(train_data["Duration"])

for i in range(len(duration)):
    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins
        if "h" in duration[i]:
            duration[i] = duration[i].strip() + " 0m"   # Adds 0 minute
        else:
            duration[i] = "0h " + duration[i]           # Adds 0 hour

duration_hours = []
duration_mins = []
for i in range(len(duration)):
    duration_hours.append(int(duration[i].split(sep = "h")[0]))    # Extract hours from duration
    duration_mins.append(int(duration[i].split(sep = "m")[0].split()[-1]))   # Extracts only minutes from duration

# Adding duration_hours and duration_mins list to train_data dataframe

train_data["Duration_hours"] = duration_hours
train_data["Duration_mins"] = duration_mins

train_data.drop(["Duration"], axis = 1, inplace = True)
train_data.head()